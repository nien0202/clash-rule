# 机场订阅
proxy-providers:
  CF:
    url: "https://cf.nine0202.dpdns.org/cf"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: DIRECT

# 节点信息
proxies:
  - {name: 🟢 DIRECT, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: true
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'

#TCP并发
tcp-concurrent: true

# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# tun配置
tun:
  stack: mixed

# 控制面板
external-controller: '[::]:9090'
secret: ""
external-ui: "ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/releases/latest/download/dist-cdn-fonts.zip"

# DNS配置
dns:
  enable: true
  listen: '[::]:1053'
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "RULE-SET:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
    - https://223.6.6.6/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 222.85.85.85
    - 222.88.88.88

#嗅探
sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  sniff:
    HTTP:
      port:
        - "80"
        - "8080"
      override-destination: true
    TLS:
      port:
        - "443"
        - "8443"
      override-destination: true
    QUIC:
      port:
        - "443"
        - "8443"
      override-destination: true
 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理,♻️ 自动选择, 📡 运营商, 🇭🇰 香港, 🇨🇳 台湾,🇯🇵 日本,🇰🇷 韩国, 🇸🇬 新加坡, 🇺🇲 美国, 🌐 全部节点, 🟢 DIRECT]}
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [♻️ 自动选择, 🇭🇰 香港, 🇨🇳 台湾, 🇯🇵 日本, 🇰🇷 韩国, 🇸🇬 新加坡, 🇺🇲 美国, 🌐 全部节点, 🟢 DIRECT]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: 📡 运营商, type: url-test, include-all: true,tolerance: 20, interval: 300, filter: "(?i)at|cmcc"}
  - {name: 🇭🇰 香港, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇨🇳 台湾, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)台|tw|taiwan|tai wan"}
  - {name: 🇰🇷 韩国, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)韩|kr|Korea"}
  - {name: 🇯🇵 日本, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)日|jp|japan"}
  - {name: 🇸🇬 新加坡, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)新加坡|狮城|sg|Singapore"}
  - {name: 🇺🇲 美国, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)美|us|unitedstates|united states"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(🟢 DIRECT)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
rules:
  - RULE-SET,private_domain,DIRECT
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,DIRECT
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,DIRECT
  - RULE-SET,AD_domain,REJECT
  - RULE-SET,EasyListChina_domain,REJECT
  - RULE-SET,ProgramAD_domain,REJECT
  - MATCH,🐟 漏网之鱼
# 规则集
rule-anchor:
  class: &class {type: http, interval: 86400, behavior: domain, format: yaml}
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class_text: &class_text {type: http, interval: 86400, behavior: classical, format: text}

rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class_text, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  AD_domain: { <<: *class, url: "https://raw.githubusercontent.com/earoftoast/clash-rules/main/AD.yaml"}
  EasyListChina_domain: { <<: *class, url: "https://raw.githubusercontent.com/earoftoast/clash-rules/main/EasyListChina.yaml"}
  ProgramAD_domain: { <<: *class, url: "https://raw.githubusercontent.com/earoftoast/clash-rules/main/ProgramAD.yaml"}

  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}